# 04장 스택과 큐

### 04-1 스택
	- 스택은 데이터를 일시적으로 저장하기 위한 자료구조로, 가장 나중에 넣은 데이터를 가장 먼저 꺼낸다.
	
	
##### 스택이란?
	- 스택(stack)은 데이터의 입력과 출력 순서는 후입선출(LIFO, Last In First Out)이다.
	스택에 데이터를 넣은 작업을 push라 하고, 꺼내는 작업을 pop이라고 한다. 스택에 꼭대기를 top이라 하고, 가장 하단을 bottom이라고 한다.
	
	- 자바 프로그램에서 메서드를 호출하고 실행할 때 프로그램 내부에서는 스택을 사용한다.
	

```
public class TestAlgorithm {
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		IntStack s = new IntStack(64);
		
		while(true) {
			System.out.println("현재 데이터 수 : " + s.size() + " / " + s.capacity());
			System.out.print("1.푸시  2.팝  3.피크  4.덤프  0.종료");
			
			int menu = sc.nextInt();
			if (menu == 0) {
				break;
			}
			
			int x;
			switch(menu) {
				case 1:
					System.out.println("데이터 : ");
					x = sc.nextInt();
					try {
						s.push(x);
					} catch(IntStack.OverflowIntStackException e) {
						System.out.println("스택이 가득 찼습니다.");
					}
					break;
					
				case 2:
					try {
					x = s.pop();
					System.out.println("팝한 데이터는 " + x + " 입니다.");
					} catch(IntStack.EmptyIntStackException e) {
						System.out.println("스택이 비어 잇습니다.");
					}
					break;
					
				case 3:
					try {
						x = s.peek();
						System.out.println("피크한 데이터는 " + x + " 입니다.");
					} catch(IntStack.EmptyIntStackException e) {
						System.out.println("스택이 비어 있습니다.");
					}
					break;
					
				case 4:
					s.dump();
					break;
			}
			
			
		}
		
		System.out.println(s.size());
		
	}
	
}

class IntStack {
	private int max;	// 스택 용량
	private int ptr;	// 스택 포인터
	private int[] stk;	// 스택 본체
	
	// 실행 시 예외: 스택이 비어 있음.
	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException() { }
	}
	
	// 실행 시 예외: 스택이 가득 참
	public class OverflowIntStackException extends RuntimeException {
		public OverflowIntStackException() { }
	}
	
	public IntStack(int capacity) {
		ptr = 0;
		max = capacity;
		try {
			stk = new int[max];
		} catch(OutOfMemoryError e) {
			max = 0;
		}
	}
	
	// 스택에 x를 push
	public int push(int x) throws OverflowIntStackException {
		if (ptr >= max) {
			throw new OverflowIntStackException();
		}
		
		return stk[ptr++] = x; 
	}
	
	// 스택에서 데이터를 pop(정상에 있는 데이터를 꺼낸다.)
	public int pop() throws EmptyIntStackException {
		if (ptr <= 0) {
			throw new EmptyStackException();
		}
		
		return stk[--ptr];
	}
	
	// 스택에서 데이터를 피크(정상에 있는 데이터를 들여다 본다.)
	public int peek() throws EmptyIntStackException {
		if (ptr <= 0) {
			throw new EmptyIntStackException();
		}
		
		return stk[ptr - 1];
	}
	
	// 스택에서 x를 찾아 인덱스(없으면 -1)를 반환
	public int indexOf(int x) {
		for (int i = ptr - 1; i >= 0; i--) {
			if (stk[i] == x) {
				return i;
			}
		}
		
		return -1;
	}
	
	// 스택을 비움
	public void clear() {
		ptr = 0;
	}
	
	// 스택의 용량을 반환
	public int capacity() {
		return max;
	}
	
	// 스택에 쌓여 있는 데이터 수를 반환
	public int size() {
		return ptr;
	}
	
	// 스택이 비어 있는가?
	public boolean isEmpty() {
		return ptr <= 0;
	}
	
	// 스택이 가득 찼는가?
	public boolean isFull() {
		return ptr >= max;
	}
	
	// 스택 안의 모든 데이터를 바닥 -> 꼭대기 순서로 출력
	public void dump() {
		if (ptr <= 0) {
			System.out.println("스택이 비어 있습니다.");
		} else {
			for (int i = 0; i < ptr; i++) {
				System.out.println(stk[i] + " ");
			}
			System.out.println();
		}
	}
	
}
```	
	

